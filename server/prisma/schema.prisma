generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                  Int                   @id @default(autoincrement())
  name                String
  code                String                @unique
  isParent            Boolean               @default(false)
  parentId            Int?
  parent              Company?              @relation("CompanyChildren", fields: [parentId], references: [id])
  children            Company[]             @relation("CompanyChildren")
  prices              CompanyProductPrice[]
  dispatchOrders      DispatchOrder[]
  products            Product[]             @relation("ProductsCreated")
  provisionalSales    ProvisionalSale[]
  purchases           Purchase[]
  purchasesFromParent PurchaseFromParent[]  @relation("BranchPurchases")
  parentSales         PurchaseFromParent[]  @relation("ParentSales")
  purchasePayments    PurchasePayment[]
  branchReceipts      Receipt[]             @relation("BranchCompanyReceipts")
  receivedPayments    Receipt[]             @relation("CompanyReceipts")
  sales               Sale[]
  salePayments        SalePayment[]
  saleReturns         SaleReturn[]
  stocks              Stock[]
  users               Users[]
  notifications       Notification[]
}

model Product {
  id                   Int                      @id @default(autoincrement())
  sku                  String                   @unique
  name                 String
  unit                 String?
  createdByCompanyId   Int
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  unitsPerBox          Decimal?                 @db.Decimal(10, 4)
  qrCode               String?
  prices               CompanyProductPrice[]
  createdByCompany     Company                  @relation("ProductsCreated", fields: [createdByCompanyId], references: [id])
  provisionalSaleLines ProvisionalSaleLine[]
  purchaseLines        PurchaseFromParentLine[]
  purchaseLineItems    PurchaseLine[]
  saleLines            SaleLine[]
  saleReturnLines      SaleReturnLine[]
  stocks               Stock[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  companyId Int
  productId Int
  updatedAt DateTime @updatedAt
  boxes     Decimal  @default(0) @db.Decimal(20, 4)
  company   Company  @relation(fields: [companyId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([companyId, productId])
}

model CompanyProductPrice {
  id        Int      @id @default(autoincrement())
  companyId Int
  productId Int
  sellPrice Decimal  @db.Decimal(18, 4)
  updatedAt DateTime @updatedAt
  company   Company  @relation(fields: [companyId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([companyId, productId])
}

model Users {
  UserID                  String          @id @default(cuid())
  UserName                String          @unique
  Password                String
  FullName                String
  Email                   String?         @unique
  Phone                   String?
  RoleID                  String
  IsActive                Boolean         @default(true)
  LastLogin               DateTime?
  PasswordChangedAt       DateTime?
  LoginAttempts           Int             @default(0)
  LockedUntil             DateTime?
  CreatedAt               DateTime        @default(now())
  UpdatedAt               DateTime        @updatedAt
  CompanyID               Int
  IsSystemUser            Boolean         @default(false)
  completedDispatchOrders DispatchOrder[]
  Sessions                UserSessions[]
  Company                 Company         @relation(fields: [CompanyID], references: [id])
  Role                    UserRoles       @relation(fields: [RoleID], references: [RoleID])
  notifications           Notification[]
}

model UserRoles {
  RoleID      String   @id @default(cuid())
  RoleName    String   @unique
  DisplayName String
  Permissions Json
  Description String?
  IsActive    Boolean  @default(true)
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt
  Users       Users[]
}

model UserSessions {
  SessionID String   @id @default(cuid())
  UserID    String
  Token     String   @unique
  ExpiresAt DateTime
  IsActive  Boolean  @default(true)
  IPAddress String?
  UserAgent String?
  CreatedAt DateTime @default(now())
  UpdatedAt DateTime @updatedAt
  User      Users    @relation(fields: [UserID], references: [UserID])
}

model Customer {
  id               Int               @id @default(autoincrement())
  name             String
  phone            String?
  note             String?
  createdAt        DateTime          @default(now())
  provisionalSales ProvisionalSale[]
  sales            Sale[]
  saleReturns      SaleReturn[]
}

model Sale {
  id                       Int               @id @default(autoincrement())
  companyId                Int
  customerId               Int?
  invoiceNumber            String?
  total                    Decimal           @default(0) @db.Decimal(18, 4)
  saleType                 SaleType?
  paymentMethod            PaymentMethod?
  createdAt                DateTime          @default(now())
  isFullyPaid              Boolean           @default(false)
  paidAmount               Decimal           @default(0) @db.Decimal(18, 4)
  remainingAmount          Decimal           @default(0) @db.Decimal(18, 4)
  receiptIssued            Boolean           @default(false)
  receiptIssuedAt          DateTime?
  receiptIssuedBy          String?
  approvedAt               DateTime?
  approvedBy               String?
  notes                    String?
  status                   SaleStatus        @default(DRAFT)
  updatedAt                DateTime          @updatedAt
  dispatchOrders           DispatchOrder[]
  provisionalSaleConverted ProvisionalSale[]
  company                  Company           @relation(fields: [companyId], references: [id])
  customer                 Customer?         @relation(fields: [customerId], references: [id])
  lines                    SaleLine[]
  payments                 SalePayment[]
  returns                  SaleReturn[]

  @@index([companyId])
  @@index([customerId])
  @@index([status])
  @@index([saleType])
  @@index([isFullyPaid])
  @@index([receiptIssued])
}

model SaleLine {
  id        Int     @id @default(autoincrement())
  saleId    Int
  productId Int
  qty       Decimal @db.Decimal(20, 4)
  unitPrice Decimal @db.Decimal(18, 4)
  subTotal  Decimal @db.Decimal(18, 4)
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])
}

model SalePayment {
  id            Int           @id @default(autoincrement())
  saleId        Int
  companyId     Int
  receiptNumber String?
  amount        Decimal       @db.Decimal(18, 4)
  paymentMethod PaymentMethod @default(CASH)
  paymentDate   DateTime      @default(now())
  notes         String?
  createdAt     DateTime      @default(now())
  company       Company       @relation(fields: [companyId], references: [id])
  sale          Sale          @relation(fields: [saleId], references: [id])

  @@index([saleId])
  @@index([companyId])
  @@index([paymentDate])
}

model SaleReturn {
  id           Int              @id @default(autoincrement())
  saleId       Int
  companyId    Int
  customerId   Int?
  returnNumber String?
  total        Decimal          @default(0) @db.Decimal(18, 4)
  refundAmount Decimal          @default(0) @db.Decimal(18, 4)
  refundMethod PaymentMethod?
  status       ReturnStatus     @default(PENDING)
  reason       String?
  notes        String?
  createdAt    DateTime         @default(now())
  processedAt  DateTime?
  company      Company          @relation(fields: [companyId], references: [id])
  customer     Customer?        @relation(fields: [customerId], references: [id])
  sale         Sale             @relation(fields: [saleId], references: [id])
  lines        SaleReturnLine[]

  @@index([saleId])
  @@index([companyId])
  @@index([customerId])
  @@index([status])
}

model SaleReturnLine {
  id           Int        @id @default(autoincrement())
  saleReturnId Int
  productId    Int
  qty          Decimal    @db.Decimal(20, 4)
  unitPrice    Decimal    @db.Decimal(18, 4)
  subTotal     Decimal    @db.Decimal(18, 4)
  product      Product    @relation(fields: [productId], references: [id])
  saleReturn   SaleReturn @relation(fields: [saleReturnId], references: [id])
}

model ProvisionalSale {
  id              Int                   @id @default(autoincrement())
  companyId       Int
  customerId      Int?
  invoiceNumber   String?
  total           Decimal               @default(0) @db.Decimal(18, 4)
  status          ProvisionalSaleStatus @default(DRAFT)
  isConverted     Boolean               @default(false)
  convertedSaleId Int?
  notes           String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  convertedAt     DateTime?
  company         Company               @relation(fields: [companyId], references: [id])
  convertedSale   Sale?                 @relation(fields: [convertedSaleId], references: [id])
  customer        Customer?             @relation(fields: [customerId], references: [id])
  lines           ProvisionalSaleLine[]

  @@index([companyId])
  @@index([customerId])
  @@index([isConverted])
}

model ProvisionalSaleLine {
  id                Int             @id @default(autoincrement())
  provisionalSaleId Int
  productId         Int
  qty               Decimal         @db.Decimal(20, 4)
  unitPrice         Decimal         @db.Decimal(18, 4)
  subTotal          Decimal         @db.Decimal(18, 4)
  product           Product         @relation(fields: [productId], references: [id])
  provisionalSale   ProvisionalSale @relation(fields: [provisionalSaleId], references: [id])
}

model Purchase {
  id              Int               @id @default(autoincrement())
  companyId       Int
  supplierId      Int?
  invoiceNumber   String?
  total           Decimal           @default(0) @db.Decimal(18, 4)
  paidAmount      Decimal           @default(0) @db.Decimal(18, 4)
  remainingAmount Decimal           @default(0) @db.Decimal(18, 4)
  purchaseType    PurchaseType      @default(CREDIT)
  paymentMethod   PaymentMethod?
  isFullyPaid     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  company         Company           @relation(fields: [companyId], references: [id])
  supplier        Supplier?         @relation(fields: [supplierId], references: [id])
  lines           PurchaseLine[]
  payments        PurchasePayment[]

  @@index([companyId])
  @@index([supplierId])
  @@index([purchaseType])
  @@index([isFullyPaid])
}

model PurchaseLine {
  id         Int      @id @default(autoincrement())
  purchaseId Int
  productId  Int
  qty        Decimal  @db.Decimal(20, 4)
  unitPrice  Decimal  @db.Decimal(18, 4)
  subTotal   Decimal  @db.Decimal(18, 4)
  product    Product  @relation(fields: [productId], references: [id])
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
}

model PurchasePayment {
  id            Int           @id @default(autoincrement())
  purchaseId    Int
  companyId     Int
  receiptNumber String?
  amount        Decimal       @db.Decimal(18, 4)
  paymentMethod PaymentMethod @default(CASH)
  paymentDate   DateTime      @default(now())
  notes         String?
  createdAt     DateTime      @default(now())
  company       Company       @relation(fields: [companyId], references: [id])
  purchase      Purchase      @relation(fields: [purchaseId], references: [id])

  @@index([purchaseId])
  @@index([companyId])
  @@index([paymentDate])
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  phone     String?
  email     String?
  address   String?
  note      String?
  createdAt DateTime   @default(now())
  purchases Purchase[]
}

model PurchaseFromParent {
  id              Int                         @id @default(autoincrement())
  branchCompanyId Int
  parentCompanyId Int
  invoiceNumber   String?
  total           Decimal                     @default(0) @db.Decimal(18, 4)
  isSettled       Boolean                     @default(false)
  createdAt       DateTime                    @default(now())
  settledAt       DateTime?
  branchCompany   Company                     @relation("BranchPurchases", fields: [branchCompanyId], references: [id])
  parentCompany   Company                     @relation("ParentSales", fields: [parentCompanyId], references: [id])
  lines           PurchaseFromParentLine[]
  receipts        PurchaseFromParentReceipt[]
}

model PurchaseFromParentLine {
  id         Int                @id @default(autoincrement())
  purchaseId Int
  productId  Int
  qty        Decimal            @db.Decimal(20, 4)
  unitPrice  Decimal            @db.Decimal(18, 4)
  subTotal   Decimal            @db.Decimal(20, 4)
  product    Product            @relation(fields: [productId], references: [id])
  purchase   PurchaseFromParent @relation(fields: [purchaseId], references: [id])
}

model Receipt {
  id              Int                         @id @default(autoincrement())
  companyId       Int
  branchCompanyId Int?
  amount          Decimal                     @db.Decimal(18, 4)
  paymentDate     DateTime                    @default(now())
  paymentMethod   PaymentMethod               @default(CASH)
  notes           String?
  createdAt       DateTime                    @default(now())
  linkedPurchases PurchaseFromParentReceipt[]
  branchCompany   Company?                    @relation("BranchCompanyReceipts", fields: [branchCompanyId], references: [id])
  company         Company                     @relation("CompanyReceipts", fields: [companyId], references: [id])
}

model PurchaseFromParentReceipt {
  id         Int                @id @default(autoincrement())
  purchaseId Int
  receiptId  Int
  amountPaid Decimal            @db.Decimal(18, 4)
  purchase   PurchaseFromParent @relation(fields: [purchaseId], references: [id])
  receipt    Receipt            @relation(fields: [receiptId], references: [id])
}

model DispatchOrder {
  id              Int                 @id @default(autoincrement())
  saleId          Int
  companyId       Int
  status          DispatchOrderStatus @default(PENDING)
  notes           String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  completedAt     DateTime?
  completedBy     String?
  company         Company             @relation(fields: [companyId], references: [id])
  completedByUser Users?              @relation(fields: [completedBy], references: [UserID])
  sale            Sale                @relation(fields: [saleId], references: [id])

  @@index([saleId])
  @@index([companyId])
  @@index([status])
  @@index([createdAt])
}

model Notification {
  id         Int              @id @default(autoincrement())
  title      String
  message    String?
  type       NotificationType @default(INFO)
  isRead     Boolean          @default(false)
  userId     String
  companyId  Int?
  entityType String?
  entityId   String?
  actionUrl  String?
  createdAt  DateTime         @default(now())
  readAt     DateTime?
  company    Company?         @relation(fields: [companyId], references: [id])
  user       Users            @relation(fields: [userId], references: [UserID])

  @@map("notifications")
}

enum SaleStatus {
  DRAFT
  APPROVED
  CANCELLED
}

enum SaleType {
  CASH
  CREDIT
}

enum PaymentMethod {
  CASH
  BANK
  CARD
}

enum PurchaseType {
  CASH
  CREDIT
}

enum ProvisionalSaleStatus {
  DRAFT
  PENDING
  APPROVED
  CONVERTED
  CANCELLED
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum DispatchOrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  SALE
  STOCK
  USER
  SYSTEM
}
