/**
 * Seed Provisional Sales Data
 * ุฅุฏุฑุงุฌ ุจูุงูุงุช ุชุฌุฑูุจูุฉ ููููุงุชูุฑ ุงููุจุฏุฆูุฉ
 */

import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

async function seedProvisionalSales() {
  try {
    console.log('๐ฑ ุจุฏุก ุฅุฏุฑุงุฌ ุจูุงูุงุช ุงูููุงุชูุฑ ุงููุจุฏุฆูุฉ ุงูุชุฌุฑูุจูุฉ...');

    // ูุฑุงุกุฉ ุงูุจูุงูุงุช ูู ุงูููู
    const dataPath = path.join(__dirname, '../seedData/provisionalSales.json');
    const provisionalSalesData = JSON.parse(fs.readFileSync(dataPath, 'utf8'));

    // ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ (ุงุฎุชูุงุฑู)
    await prisma.provisionalSaleLine.deleteMany({});
    await prisma.provisionalSale.deleteMany({});
    console.log('๐๏ธ ุชู ุญุฐู ุงูุจูุงูุงุช ุงูููุฌูุฏุฉ');

    // ุฅุฏุฑุงุฌ ุงูููุงุชูุฑ ุงููุจุฏุฆูุฉ
    for (const saleData of provisionalSalesData) {
      const { lines, ...saleInfo } = saleData;
      
      // ุฅูุดุงุก ุงููุงุชูุฑุฉ ุงููุจุฏุฆูุฉ
      const provisionalSale = await prisma.provisionalSale.create({
        data: {
          ...saleInfo,
          createdAt: new Date(saleInfo.createdAt),
          updatedAt: new Date(saleInfo.updatedAt),
        }
      });

      console.log(`โ ุชู ุฅูุดุงุก ูุงุชูุฑุฉ ูุจุฏุฆูุฉ: ${provisionalSale.invoiceNumber}`);

      // ุฅุฏุฑุงุฌ ุจููุฏ ุงููุงุชูุฑุฉ
      for (const lineData of lines) {
        await prisma.provisionalSaleLine.create({
          data: {
            provisionalSaleId: provisionalSale.id,
            productId: lineData.productId,
            qty: lineData.qty,
            unitPrice: lineData.unitPrice,
            subTotal: lineData.total, // ุงุณุชุฎุฏุงู total ูู subTotal
          }
        });
      }

      console.log(`๐ ุชู ุฅุฏุฑุงุฌ ${lines.length} ุจูุฏ ูููุงุชูุฑุฉ ${provisionalSale.invoiceNumber}`);
    }

    console.log('๐ ุชู ุฅุฏุฑุงุฌ ุฌููุน ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ ุจูุฌุงุญ!');

    // ุนุฑุถ ุฅุญุตุงุฆูุงุช
    const totalSales = await prisma.provisionalSale.count();
    const totalLines = await prisma.provisionalSaleLine.count();
    
    console.log(`๐ ุงูุฅุญุตุงุฆูุงุช:`);
    console.log(`   - ุฅุฌูุงูู ุงูููุงุชูุฑ ุงููุจุฏุฆูุฉ: ${totalSales}`);
    console.log(`   - ุฅุฌูุงูู ุงูุจููุฏ: ${totalLines}`);

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// ุชุดุบูู ุงูุณูุฑูุจุช
if (require.main === module) {
  seedProvisionalSales()
    .then(() => {
      console.log('โจ ุชู ุงูุงูุชูุงุก ูู ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช');
      process.exit(0);
    })
    .catch((error) => {
      console.error('๐ฅ ูุดู ูู ุฅุฏุฑุงุฌ ุงูุจูุงูุงุช:', error);
      process.exit(1);
    });
}

export { seedProvisionalSales };
